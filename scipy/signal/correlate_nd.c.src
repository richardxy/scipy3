/*
 * vim:syntax=c
 * vim:sw=4
 */
#include <Python.h>
#define PY_ARRAY_UNIQUE_SYMBOL _scipy_signal_ARRAY_API
#define NO_IMPORT_ARRAY
#include <numpy/noprefix.h>

#include "neighiter.h"

#include "sigtools.h"

enum {
    CORR_MODE_VALID=0,
    CORR_MODE_SAME,
    CORR_MODE_FULL
};

static int
_correlate_nd(PyArrayObject* x, PyArrayObject *y, PyArrayObject *z,
              int typenum, int mode);

static int _correlate_nd_imp(PyArrayIterObject* x, PyArrayIterObject *y,
        PyArrayIterObject *z, int typenum, int mode);

PyObject *
scipy_signal_sigtools_correlateND(PyObject *NPY_UNUSED(dummy), PyObject *args)
{
    PyObject *x, *y, *out;
    PyArrayObject *ax, *ay, *aout;
    int mode, typenum, st;

    if (!PyArg_ParseTuple(args, "OOOi", &x, &y, &out, &mode)) {
        return NULL;
    }

    typenum = PyArray_ObjectType(x, 0);
    typenum = PyArray_ObjectType(y, typenum);
    typenum = PyArray_ObjectType(out, typenum);

    ax = (PyArrayObject *)PyArray_FromObject(x, typenum, 0, 0);
    if (ax == NULL) {
        return NULL;
    }

    ay = (PyArrayObject *)PyArray_FromObject(y, typenum, 0, 0);
    if (ay == NULL) {
        goto clean_ax;
    }

    aout = (PyArrayObject *)PyArray_FromObject(out, typenum, 0, 0);
    if (aout == NULL) {
        goto clean_ay;
    }

    if (ax->nd != ay->nd) {
        PyErr_SetString(PyExc_ValueError,
                "Arrays must have the same number of dimensions.");
        goto clean_aout;
    }

    if (ax->nd == 0) {
        PyErr_SetString(PyExc_ValueError, "Cannot convolve zero-dimensional arrays.");
        goto clean_aout;
    }

    switch(mode) {
    case CORR_MODE_VALID:
        break;
    case CORR_MODE_SAME:
        break;
    case CORR_MODE_FULL:
        break;
    default:
        PyErr_SetString(PyExc_ValueError,
                "mode must be 0 (valid), 1 (same), or 2 (full)");
        goto clean_aout;
    }

    st = _correlate_nd(ax, ay, aout, typenum, mode);
    if (st) {
        goto clean_aout;
    }

    Py_DECREF(ax);
    Py_DECREF(ay);
    return PyArray_Return(aout);

clean_aout:
    Py_DECREF(aout);
clean_ay:
    Py_DECREF(ay);
clean_ax:
    Py_DECREF(ax);
    return NULL;
}

/*
 * Implementation of the type-specific correlation 'kernels'
 */

/**begin repeat
 * #fsuf = ubyte, byte, ushort, short, uint, int, ulong, long, ulonglong, longlong, float, double, longdouble#
 * #type = ubyte, byte, ushort, short, uint, int, ulong, long, ulonglong, longlong, float, double, npy_longdouble#
 */
static int _imp_correlate_nd_@fsuf@(PyArrayNeighIterObject *curx,
        PyArrayNeighIterObject *curneighx, PyArrayIterObject *ity,
        PyArrayIterObject *itz)
{
    npy_intp i, j;
    @type@ acc;
    PyArrayIterObject *curneighxbase = (PyArrayIterObject*)curneighx;
    PyArrayIterObject *curxbase = (PyArrayIterObject*)curx;

    for(i = 0; i < curxbase->size; ++i) {
        acc = 0;
        PyArrayNeighIter_Reset(curneighx);
        for(j = 0; j < curneighxbase->size; ++j) {
            acc += *((@type@*)(curneighxbase->dataptr)) * *((@type@*)(ity->dataptr));

            PyArrayNeighIter_Next(curneighx);
            PyArray_ITER_NEXT(ity);
        }
        PyArrayNeighIter_Next(curx);

        *((@type@*)(itz->dataptr)) = acc;
        PyArray_ITER_NEXT(itz);

        PyArray_ITER_RESET(ity);
    }

    return 0;
}
/**end repeat**/

/**begin repeat
 * #fsuf = float, double, longdouble#
 * #type = float, double, npy_longdouble#
 */
static int _imp_correlate_nd_c@fsuf@(PyArrayNeighIterObject *curx,
        PyArrayNeighIterObject *curneighx, PyArrayIterObject *ity,
        PyArrayIterObject *itz)
{
    int i, j;
    @type@ racc, iacc;
    @type@ *ptr1, *ptr2;
    PyArrayIterObject *curneighxbase = (PyArrayIterObject*)curneighx;
    PyArrayIterObject *curxbase = (PyArrayIterObject*)curx;

    for(i = 0; i < curxbase->size; ++i) {
        racc = 0;
        iacc = 0;
        PyArrayNeighIter_Reset(curneighx);
        for(j = 0; j < curneighxbase->size; ++j) {
            ptr1 = ((@type@*)(curneighxbase->dataptr));
            ptr2 = ((@type@*)(ity->dataptr));
            racc += ptr1[0] * ptr2[0] - ptr1[1] * ptr2[1];
            iacc += ptr1[1] * ptr2[0] + ptr1[0] * ptr2[1];

            PyArrayNeighIter_Next(curneighx);
            PyArray_ITER_NEXT(ity);
        }
        PyArrayNeighIter_Next(curx);

        ((@type@*)(itz->dataptr))[0] = racc;
        ((@type@*)(itz->dataptr))[1] = iacc;
        PyArray_ITER_NEXT(itz);

        PyArray_ITER_RESET(ity);
    }

    return 0;
}
/**end repeat**/

static int _imp_correlate_nd_object(PyArrayNeighIterObject *curx,
        PyArrayNeighIterObject *curneighx, PyArrayIterObject *ity,
        PyArrayIterObject *itz)
{
    int i, j;
    PyObject *tmp, *tmp2;
    char *zero;
    PyArrayIterObject *curneighxbase = (PyArrayIterObject*)curneighx;
    PyArrayIterObject *curxbase = (PyArrayIterObject*)curx;
    PyArray_CopySwapFunc *copyswap = curxbase->ao->descr->f->copyswap;

    zero = PyArray_Zero(curxbase->ao);

    for(i = 0; i < curxbase->size; ++i) {
        PyArrayNeighIter_Reset(curneighx);
        copyswap(itz->dataptr, zero, 0, NULL);

        for(j = 0; j < curneighxbase->size; ++j) {
            /*
             * compute tmp2 = acc + x * y. Not all objects supporting the
             * number protocol support inplace operations, so we do it the most
             * straightfoward way.
             */
            tmp = PyNumber_Multiply(*((PyObject**)curneighxbase->dataptr),
                                    *((PyObject**)ity->dataptr));
            tmp2 = PyNumber_Add(*((PyObject**)itz->dataptr), tmp);
            Py_DECREF(tmp);

            /* Update current output item (acc) */
            Py_DECREF(*((PyObject**)itz->dataptr));
            *((PyObject**)itz->dataptr) = tmp2;

            PyArrayNeighIter_Next(curneighx);
            PyArray_ITER_NEXT(ity);
        }

        PyArrayNeighIter_Next(curx);

        PyArray_ITER_NEXT(itz);

        PyArray_ITER_RESET(ity);
    }

    PyDataMem_FREE(zero);

    return 0;
}

/* XXX: this func is useless */
static int _correlate_nd(PyArrayObject* x, PyArrayObject *y, PyArrayObject *z,
        int typenum, int mode)
{
    PyArrayIterObject *itx, *ity, *itz;
    int st;

    itx = (PyArrayIterObject*)PyArray_IterNew(x);
    if (itx == NULL) {
        return -1;
    }
    ity = (PyArrayIterObject*)PyArray_IterNew(y);
    if (ity == NULL) {
        goto clean_itx;
    }
    itz = (PyArrayIterObject*)PyArray_IterNew(z);
    if (itz == NULL) {
        goto clean_ity;
    }

    st = _correlate_nd_imp(itx, ity, itz, typenum, mode);

    if (st) {
        goto clean_itz;
    }

    Py_DECREF(itz);
    Py_DECREF(ity);
    Py_DECREF(itx);

    return 0;

clean_itz:
    Py_DECREF(itz);
clean_ity:
    Py_DECREF(ity);
clean_itx:
    Py_DECREF(itx);
    return -1;
}

static int _correlate_nd_imp(PyArrayIterObject* itx, PyArrayIterObject *ity,
        PyArrayIterObject *itz, int typenum, int mode)
{
    PyArrayNeighIterObject *curneighx, *curx;
    PyArrayIterObject *curxbase;
    npy_intp i, nz, nx;
    npy_intp bounds[NPY_MAXDIMS*2];

    /* Compute boundaries for the neighborhood iterator curx: curx is used to
     * traverse x directly, such as each point of the output is the
     * innerproduct of y with the neighborhood around curx */
    switch(mode) {
        case CORR_MODE_VALID:
            /* Only walk through the input points such as the correponding
             * output will not depend on 0 padding */
            for(i = 0; i < itx->ao->nd; ++i) {
                bounds[2*i] = ity->ao->dimensions[i] - 1;
                bounds[2*i+1] = itx->ao->dimensions[i] - 1;
            }
            break;
        case CORR_MODE_SAME:
            /* Only walk through the input such as the output will be centered
               relatively to the output as computed in the full mode */
            for(i = 0; i < itx->ao->nd; ++i) {
                nz = itx->ao->dimensions[i];
                /* Recover 'original' nx, before it was zero-padded */
                nx = nz - ity->ao->dimensions[i] + 1;
                if ((nz - nx) % 2 == 0) {
                    bounds[2*i] = (nz - nx) / 2;
                } else {
                    bounds[2*i] = (nz - nx - 1) / 2;
                }
                bounds[2*i+1] = bounds[2*i] + nx - 1;
            }
            break;
        case CORR_MODE_FULL:
            for(i = 0; i < itx->ao->nd; ++i) {
                bounds[2*i] = 0;
                bounds[2*i+1] = itx->ao->dimensions[i] - 1;
            }
            break;
        default:
            printf("NE ? %s\n", __FILE__);
            return -1;
    }

    curx = PyArrayNeighIter_New(itx, bounds);
    if (curx == NULL) {
        return -1;
    }
    curxbase = (PyArrayIterObject*)curx;

    /* Compute boundaries for the neighborhood iterator: the neighborhood for x
       should have the same dimensions as y */
    for(i = 0; i < ity->ao->nd; ++i) {
        bounds[2*i] = -ity->ao->dimensions[i] + 1;
        bounds[2*i+1] = 0;
    }

    curneighx = PyArrayNeighIter_New(curxbase, bounds);
    if (curneighx == NULL) {
        goto clean_curx;
    }

    switch(typenum) {
/**begin repeat
 * #TYPE = UBYTE, BYTE, USHORT, SHORT, UINT, INT, ULONG, LONG, ULONGLONG, LONGLONG, FLOAT, DOUBLE, LONGDOUBLE, CFLOAT, CDOUBLE, CLONGDOUBLE, OBJECT#
 * #type = ubyte, byte, ushort, short, uint, int, ulong, long, ulonglong, longlong, float, double, longdouble, cfloat, cdouble, clongdouble, object#
 */
        case PyArray_@TYPE@:
            _imp_correlate_nd_@type@(curx, curneighx, ity, itz);
            break;
/**end repeat**/
        default:
            PyErr_SetString(PyExc_ValueError,
                    "Only double supported for now");
            goto clean_curneighx;
    }

    Py_DECREF((PyArrayIterObject*)curx);
    Py_DECREF((PyArrayIterObject*)curneighx);

    return 0;

clean_curx:
    Py_DECREF((PyArrayIterObject*)curx);
clean_curneighx:
    Py_DECREF((PyArrayIterObject*)curneighx);
    return -1;
}
